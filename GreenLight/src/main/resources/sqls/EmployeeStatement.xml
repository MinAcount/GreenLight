<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.green.light.model.mapper.EmployeeDaoImpl">

<resultMap type="com.green.light.vo.EmployeeVo" id="EmployeeVo">
	<result property="id" column="ID"/>
	<result property="name" column="NAME"/>
	<result property="email" column="EMAIL"/>
	<result property="phone" column="PHONE"/>
	<result property="birthday" column="BIRTHDAY"/>
	<result property="gender" column="GENDER"/>
	<result property="address" column="ADDRESS"/>
	<result property="spot" column="SPOT"/>
	<result property="deptno" column="DEPTNO"/>
	<result property="position" column="POSITION"/>
	<result property="estatus" column="ESTATUS"/>
	<result property="join_day" column="JOIN_DAY"/>
	<result property="exit_day" column="EXIT_DAY"/>
	<result property="etype" column="ETYPE"/>
	<result property="leave" column="LEAVE"/>
	<result property="auth" column="AUTH"/>
	<result property="profile" column="PROFILE"/>
	<collection property="comVo" resultMap="CommonVo"/>
</resultMap>
<resultMap type="com.green.light.vo.CommonVo" id="CommonVo">
	<result property="type" column="TYPE"/>
	<result property="code" column="DNAME"/>
	<result property="code_name" column="CODE_NAME"/>
</resultMap>

<!-- 로그인	getLogin -->
<select id="getLogin" parameterType="java.util.Map" resultType="EmpVo">
	<![CDATA[
		SELECT ID, NAME, EMAIL, PHONE, BIRTHDAY, GENDER,
		        ADDRESS, DEPTNO, (SELECT c.CODE_NAME
									FROM EMPLOYEE e JOIN COMMON c
									ON e.SPOT = c.CODE
									WHERE ID = #{id}
									AND c."TYPE" = '직위') AS SPOT,
				(SELECT c.CODE_NAME
					FROM EMPLOYEE e JOIN COMMON c
					ON e."POSITION" = c.CODE
					WHERE ID = #{id}
					AND c."TYPE" = '직책') AS "POSITION",
				ESTATUS, JOIN_DAY, EXIT_DAY, ETYPE,
		        LEAVE, AUTH, PROFILE, FAIL
	        FROM EMPLOYEE e 
	        WHERE ID= #{id} AND PASSWORD = #{password} 
	        AND ESTATUS = 'Y'
	        AND FAIL < 5
	]]>
</select>
<!-- 로그인 시도 횟수 증가 및 초기화	updateFail -->
<update id="updateFail" parameterType="java.util.Map">
	UPDATE EMPLOYEE
		SET FAIL = #{fail}
		WHERE ID = #{id}
</update>

<!-- 로그인 시도 횟수 조회 및 암호화된 비밀번호 조회 -->
<select id="getLoginFail" parameterType="java.lang.String" resultType="EmpVo">
	SELECT FAIL , ID, PASSWORD
		FROM EMPLOYEE e
		WHERE ID =#{id}
</select>
<!-- 비밀번호 찾기	getPassword -->
<select id="getPassword" parameterType="java.util.Map" resultType="EmpVo">
	SELECT ID, PASSWORD, EMAIL
        FROM EMPLOYEE e
        WHERE ID=#{id} AND EMAIL = #{email}
</select>
<!-- 비밀번호 변경	updatePassword -->
<update id="updatePassword" parameterType="java.util.Map">
	UPDATE EMPLOYEE SET PASSWORD = #{password}
        WHERE ID = #{id}
</update>
<!-- 직원 전체 조회	getAllEmployee -->
<select id="getAllEmployee" resultMap="EmployeeVo">
	SELECT ID, NAME, EMAIL, PHONE, BIRTHDAY, GENDER,
	        ADDRESS, DEPTNO, 
	        (SELECT c.CODE_NAME
	            FROM COMMON c
	            WHERE e.SPOT = c.CODE
	            AND c."TYPE" = '직위') AS SPOT,
	        (SELECT c.CODE_NAME
	            FROM COMMON c
	            WHERE e."POSITION" = c.CODE
	            AND c."TYPE" = '직책') AS "POSITION", 
	        ESTATUS, JOIN_DAY, EXIT_DAY, ETYPE,
	        LEAVE, AUTH, PROFILE
	FROM EMPLOYEE e 
	WHERE ID != 'admin'
	ORDER BY NAME
</select>
<!-- 직원 상세 조회	getOneEmployee -->
<select id="getOneEmployee" parameterType="java.lang.String" resultMap="EmployeeVo">
	SELECT ID, NAME, PASSWORD, EMAIL, PHONE, BIRTHDAY, GENDER,
        ADDRESS, DEPTNO, (SELECT c.CODE_NAME
	            FROM COMMON c
	            WHERE e.SPOT = c.CODE
	            AND c."TYPE" = '직위') AS SPOT,
	        (SELECT c.CODE_NAME
	            FROM COMMON c
	            WHERE e."POSITION" = c.CODE
	            AND c."TYPE" = '직책') AS "POSITION",
	    ESTATUS, JOIN_DAY, EXIT_DAY, ETYPE,
        LEAVE, AUTH, PROFILE
        FROM EMPLOYEE e
        WHERE ID=#{id}
</select>
<!-- 직원 재직상태별 조회	getAllEmployeeByStatus -->
<select id="getAllEmployeeByStatus" parameterType="java.lang.String" resultMap="EmployeeVo">
	SELECT ID, NAME, EMAIL, PHONE, BIRTHDAY, GENDER,
        ADDRESS, DEPTNO, (SELECT c.CODE_NAME
	            FROM COMMON c
	            WHERE e.SPOT = c.CODE
	            AND c."TYPE" = '직위') AS SPOT,
	        (SELECT c.CODE_NAME
	            FROM COMMON c
	            WHERE e."POSITION" = c.CODE
	            AND c."TYPE" = '직책') AS "POSITION",
	    ESTATUS, JOIN_DAY, EXIT_DAY, ETYPE,
        LEAVE, AUTH, PROFILE
        FROM EMPLOYEE e 
        WHERE ESTATUS = #{estatus}
        AND ID != 'admin'
        ORDER BY NAME
</select>
<!-- 직원 검색	getEmployeeBySearch -->
<select id="getEmployeeBySearch" parameterType="EmpVo" resultMap="EmployeeVo">
	SELECT ID, NAME, EMAIL, PHONE, BIRTHDAY, GENDER,
        ADDRESS, DEPTNO, (SELECT c.CODE_NAME
	            FROM COMMON c
	            WHERE e.SPOT = c.CODE
	            AND c."TYPE" = '직위') AS SPOT,
	        (SELECT c.CODE_NAME
	            FROM COMMON c
	            WHERE e."POSITION" = c.CODE
	            AND c."TYPE" = '직책') AS "POSITION",
	    ESTATUS, JOIN_DAY, EXIT_DAY, ETYPE,
        LEAVE, AUTH, PROFILE
        FROM EMPLOYEE e 
        <choose>
        	<when test="opt.equals('name')">
        		 WHERE NAME LIKE '%'||#{keyword}||'%'
        	</when>
        	<when test="opt.equals('dept')">
        		 WHERE DNAME LIKE '%'||#{keyword}||'%'
        	</when>
        </choose>
        AND ESTATUS = #{estatus}
        AND ID != 'admin'
        ORDER BY NAME
</select>
<!-- 직원 정보 수정	updateOneEmployee -->
<update id="updateOneEmployee" parameterType="EmpVo">
	UPDATE EMPLOYEE
        SET NAME = #{name} , DEPTNO = #{deptno}, ETYPE = #{etype},
        SPOT = #{spot} , EMAIL = #{email}, ADDRESS = #{address},
        PHONE = #{phone}, PROFILE= #{profile}, JOIN_DAY = #{join_day}
        WHERE ID = #{id} AND ESTATUS = 'Y'
</update>
<!-- 권한 변경	updateEmployeeAuth -->
<update id="updateEmployeeAuth" parameterType="java.lang.String">
	UPDATE EMPLOYEE SET AUTH = CASE WHEN DEPTNO = '09' THEN '02' ELSE '01' END
        WHERE ID = #{id}
</update>
<!-- 직원 퇴사 처리	updateExitEmployee -->
<update id="updateExitEmployee" parameterType="java.lang.String">
	UPDATE EMPLOYEE SET ESTATUS = 'N' , EXIT_DAY = #{exit_day}
        WHERE ID = #{id}
</update>
<!-- 퇴사한 직원의 직책 지우기    deleteDeptMgr -->
<update id="deleteDeptMgr" parameterType="java.lang.String">
	UPDATE DEPARTMENT SET DEPT_MGR = ''
        WHERE DEPT_MGR = #{id}
        AND (SELECT "POSITION" 
                        FROM EMPLOYEE e
                        WHERE "POSITION" = '01'
                        AND ID = #{id} AND ESTATUS = 'N') IS NOT NULL
</update>
<!-- 퇴사한 직원의 직책 지우기    deleteHeadMgr -->
<update id="deleteHeadMgr" parameterType="java.lang.String">
	UPDATE HEADQUARTERS SET HEAD_MGR = ''
        WHERE HEAD_MGR = #{id}
        AND (SELECT "POSITION"
                        FROM EMPLOYEE e
                        WHERE "POSITION" = '02'
                        AND ID = #{id} AND ESTATUS = 'N') IS NOT NULL
</update>
<!-- 퇴사일 수정	updateEmployeeExitDay -->
<update id="updateEmployeeExitDay" parameterType="java.util.Map">
	UPDATE EMPLOYEE 
        SET EXIT_DAY = #{exit_day}
        WHERE ID = #{id} AND ESTATUS = 'N'
</update>
<!-- 직원 입사 처리	insertEmployee -->
<insert id="insertEmployee" parameterType="EmpVo">
	INSERT INTO EMPLOYEE e (ID, NAME, EMAIL, PHONE, BIRTHDAY, GENDER, PASSWORD, 
						ADDRESS, DEPTNO, SPOT, JOIN_DAY, ETYPE, PROFILE)
	VALUES((SELECT COALESCE ((SELECT TO_CHAR(MAX(ID)+1)
	FROM EMPLOYEE e
	WHERE ID LIKE (TO_CHAR(TO_DATE(#{join_day}),'YYMMDD'))||#{deptno}||'%')
				,TO_CHAR(TO_DATE(#{join_day}),'YYMMDD')||#{deptno}||'01') AS ID
	FROM DUAL),#{name}, #{email},#{phone},#{birthday},#{gender}, #{password},
	#{address},#{deptno},#{spot}, #{join_day},#{etype},#{profile})
</insert>
<!-- 부서장 후보 조회	getDeptMgrHubo -->
<select id="getDeptMgrHubo" parameterType="java.lang.String" resultType="EmpVo">
	SELECT "POSITION" , ID, NAME, DEPTNO, SPOT
        FROM EMPLOYEE e
        WHERE "POSITION" IS NULL 
        AND DEPTNO IS NOT NULL
        AND DEPTNO = #{deptno}
        AND SPOT >= '04'
        AND ESTATUS = 'Y'
        ORDER BY NAME
</select>
<!-- 본부장 후보 조회	getHeadMgrHubo -->
<select id="getHeadMgrHubo" parameterType="java.lang.String" resultMap="EmployeeVo">
	SELECT "POSITION" , ID, NAME, e.DEPTNO, (SELECT c.CODE_NAME
	            FROM COMMON c
	            WHERE e.SPOT = c.CODE
	            AND c."TYPE" = '직위') AS SPOT, HEADNO
        FROM EMPLOYEE e JOIN DEPARTMENT d
        ON e.DEPTNO = d.DEPTNO
        WHERE "POSITION" IS NULL 
        AND d.DEPTNO IS NOT NULL
        AND d.HEADNO = #{headno}
        AND SPOT >= '06'
        AND ESTATUS = 'Y'
        ORDER BY NAME
</select>
</mapper>
