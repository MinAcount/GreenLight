<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.green.light.model.mapper.MessageDaoImpl">

<resultMap type="com.green.light.vo.MessageVo" id="MessageVo">
	<result property="mesg_id" column="MESG_ID"/>
	<result property="chat_id" column="CHAT_ID"/>
	<result property="writter" column="WRITTER"/>
	<result property="content" column="CONTENT"/>
	<result property="send_date" column="SEND_DATE"/>
	<result property="file_yn" column="FILE_YN"/>
	<collection property="gmvo" resultMap="GroupMemberVo"/>
	<collection property="empVo" resultMap="EmployeeVo"/>
	<collection property="comVo" resultMap="CommonVo"/>
</resultMap>
<resultMap type="com.green.light.vo.GroupMemberVo" id="GroupMemberVo">
	<result property="groupno" column="GROUPNO"/>
	<result property="chat_id" column="CHAT_ID"/>
	<result property="id" column="ID"/>
	<result property="roomname" column="ROOMNAME"/>
<!-- 	<result property="name" column="NAME"/> -->
	<result property="noti" column="NOTI"/>
	<result property="group_out" column="GROUP_OUT"/>
	<result property="last_mesg" column="LAST_MESG"/>
	<result property="favor" column="FAVOR"/>
</resultMap>
<resultMap type="com.green.light.vo.EmployeeVo" id="EmployeeVo">
		<result property="id" column="ID"/>
		<result property="name" column="NAME"/>
<!-- 		<result property="password" column="PASSWORD"/> -->
<!-- 		<result property="email" column="EMAIL"/> -->
<!-- 		<result property="phone" column="PHONE"/> -->
<!-- 		<result property="birthday" column="BIRTHDAY"/> -->
<!-- 		<result property="gender" column="GENDER"/> -->
<!-- 		<result property="address" column="ADDRESS"/> -->
		<result property="deptno" column="DEPTNO"/>
		<result property="spot" column="SPOT"/>
		<result property="position" column="POSITION"/>
<!-- 		<result property="estatus" column="ESTATUS"/> -->
<!-- 		<result property="join_day" column="JOIN_DAY"/> -->
<!-- 		<result property="exit_day" column="EXIT_DAY"/> -->
<!-- 		<result property="etype" column="ETYPE"/> -->
		<result property="leave" column="LEAVE"/>
<!-- 		<result property="auth" column="AUTH"/> -->
<!-- 		<result property="profile" column="PROFILE"/> -->
	</resultMap>                    
<resultMap type="com.green.light.vo.CommonVo" id="CommonVo">
	<result property="type" column="TYPE"/>
	<result property="code" column="CODE"/>
	<result property="code_name" column="CODE_NAME"/>
</resultMap>

<!-- 	 채팅방 목록 조회 getAllChat -->
<select id="getAllChat" resultMap="MessageVo">
SELECT GROUPNO, CHAT_ID, ROOMNAME,
       FAVOR, NOTI, SEND_DATE,
       MESG_ID, CONTENT, GROUP_OUT
       FROM (SELECT MAX(G.GROUPNO) AS GROUPNO, G.CHAT_ID, MAX(G.ROOMNAME) AS ROOMNAME,
                    MAX(G.FAVOR) AS FAVOR, MAX(G.NOTI) AS NOTI, MAX(M.SEND_DATE) AS SEND_DATE,
                    MAX(M.MESG_ID) AS MESG_ID, MAX(M.CONTENT) AS CONTENT, MAX(G.GROUP_OUT) AS GROUP_OUT
             FROM GROUPMEMBER G, MESSAGE M
             WHERE G.ID = #{id}
             AND G.CHAT_ID = M.CHAT_ID
             AND G.LAST_MESG = M.MESG_ID 
             GROUP BY G.CHAT_ID) S
       WHERE GROUP_OUT = 'N'
       ORDER BY SEND_DATE DESC
</select>
<!-- 	 채팅방 목록 검색 getSearchChat -->
<select id="getSearchChat" parameterType="java.util.Map" resultMap="MessageVo">
SELECT G.GROUPNO , G.CHAT_ID , ROOMNAME ,
       G.NOTI , G.FAVOR, M.CONTENT , M.SEND_DATE
       FROM GROUPMEMBER g 
       JOIN EMPLOYEE e ON E.ID = G.ID 
       JOIN MESSAGE m ON m.CHAT_ID = g.CHAT_ID
       WHERE LAST_MESG = M.MESG_ID  
       AND (E.NAME LIKE '%' || #{keyword} || '%'
         OR G.NAME LIKE '%' || #{keyword} || '%')
       AND GROUP_OUT = 'N'
       AND E.ID = #{id}
</select>
<!-- 	 채팅방 생성 insertChat -->
<insert id="insertChat" parameterType="java.util.Map" >
<selectKey resultType="java.lang.String" keyProperty="groupno" order="BEFORE">
	SELECT GROUPMEMBER_SEQ.NEXTVAL FROM DUAL
</selectKey>
	INSERT INTO GROUPMEMBER (GROUPNO, CHAT_ID, ROOMNAME, ID)
       VALUES (#{groupno}, #{chat_id}, #{roomname}, #{id})
</insert>
<!-- 채팅방 아이디 찾기 getChatIdFound -->
<select id="getChatIdFound" resultType="java.lang.String">
	SELECT TO_CHAR(MAX(NVL(TO_NUMBER(CHAT_ID),0))+1) 
		FROM GROUPMEMBER g
</select>
<!--      채팅방 세부 조회 getViewInsideChat -->
<select id="getViewInsideChat" resultMap="MessageVo">
SELECT G.GROUPNO, G.CHAT_ID, G.ROOMNAME,
       G.FAVOR, G.NOTI, M.WRITTER,
       G.ID, E.NAME, C.CODE_NAME,
       M.CONTENT, M.SEND_DATE, M.FILE_YN 
       FROM GROUPMEMBER G
       JOIN MESSAGE M ON g.CHAT_ID = M.CHAT_ID
       JOIN EMPLOYEE e ON E.ID = G.ID 
       JOIN COMMON c ON c.CODE = e.SPOT 
       WHERE G.CHAT_ID = #{chat_id} AND M.WRITTER = G.ID
       AND M.WRITTER != '시스템'
       AND "TYPE" = '직위'
       AND GROUP_OUT = 'N'
       ORDER BY M.SEND_DATE ASC
</select>
<!-- 	 채팅방 이름 수정 updateChatName -->
<update id="updateChatName" parameterType="java.util.Map">
UPDATE GROUPMEMBER 
       SET ROOMNAME = #{roomname}
       WHERE CHAT_ID = #{chat_id}
</update>
<!-- 	 채팅방 나가기 getOutChat -->
<update id="getOutChat" parameterType="java.util.Map">
UPDATE GROUPMEMBER
       SET GROUP_OUT = 'Y'
       WHERE CHAT_ID = #{chat_id} AND ID = #{id}
</update>
<!-- 	 채팅방 초대하기 insertInviteChat -->
<insert id="insertInviteChat" parameterType="java.util.Map">
INSERT INTO GROUPMEMBER(GROUPNO, CHAT_ID, ID, ROOMNAME) 
       VALUES (GROUPMEMBER_SEQ.NEXTVAL, #{chat_id}, #{id}, #{roomname})
</insert>
<!-- 	 즐겨찾기 updateFavor -->
<update id="updateFavor" parameterType="java.util.Map">
UPDATE GROUPMEMBER
       SET FAVOR = #{favor}
       WHERE CHAT_ID = #{chat_id} AND ID = #{id}
</update>
<!-- 	 알림여부 updateNoti -->
<update id="updateNoti" parameterType="java.util.Map">
UPDATE GROUPMEMBER
       SET NOTI = #{noti}
       WHERE CHAT_ID = #{chat_id} AND ID = #{id}
</update>
<!-- 	 메시지 전송 insertSendMessage -->
<insert id="insertSendMessage" parameterType="MessageVo">
	<selectKey resultType="java.lang.String" keyProperty="mesg_id" order="BEFORE">
		SELECT MESSAGE_SEQ.NEXTVAL FROM DUAL
	</selectKey>
	INSERT INTO MESSAGE (MESG_ID, CHAT_ID, WRITTER, CONTENT, SEND_DATE, FILE_YN) 
    VALUES (#{mesg_id}, #{chat_id}, #{writter}, #{content}, CURRENT_DATE, 'N')
</insert>
<!-- 	 메시지 전송 updateSendMessage -->
<update id="updateSendMessage" parameterType="java.util.Map">
UPDATE GROUPMEMBER
       SET LAST_MESG = MESSAGE_SEQ.CURRVAL
       WHERE CHAT_ID = #{chat_id}
</update>





</mapper>
